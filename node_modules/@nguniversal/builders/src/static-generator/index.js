/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@nguniversal/builders/src/static-generator/index", ["require", "exports", "@angular-devkit/architect", "@angular-devkit/build-angular/src/utils/normalize-optimization", "@angular-devkit/build-angular/src/utils/service-worker", "@angular-devkit/core", "jest-worker", "ora", "os", "path", "@nguniversal/builders/src/static-generator/utils"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.execute = void 0;
    const architect_1 = require("@angular-devkit/architect");
    const normalize_optimization_1 = require("@angular-devkit/build-angular/src/utils/normalize-optimization");
    const service_worker_1 = require("@angular-devkit/build-angular/src/utils/service-worker");
    const core_1 = require("@angular-devkit/core");
    const jest_worker_1 = require("jest-worker");
    const ora = require("ora");
    const os_1 = require("os");
    const path = require("path");
    const utils_1 = require("@nguniversal/builders/src/static-generator/utils");
    /**
     * Builds the browser and server, then renders each route in options.routes
     * and writes them to prerender/<route>/index.html for each output path in
     * the browser result.
     */
    function execute(options, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const browserTarget = architect_1.targetFromTargetString(options.browserTarget);
            const browserOptions = (yield context.getTargetOptions(browserTarget));
            const routes = yield utils_1.getRoutes(options, browserOptions.tsConfig, context);
            if (!routes.length) {
                throw new Error(`Could not find any routes to generate.`);
            }
            const { result } = yield context.scheduleTarget(browserTarget, {
                watch: false,
                serviceWorker: false,
            });
            const { success, error, outputPaths } = (yield result);
            if (!success) {
                return { success, error };
            }
            const worker = createWorker(browserOptions);
            try {
                for (const outputPath of outputPaths) {
                    const spinner = ora(`Prerendering ${routes.length} route(s) to ${outputPath}...`).start();
                    try {
                        yield Promise.all(routes.map((route) => worker.render({
                            outputPath,
                            route,
                        })));
                        spinner.succeed(`Prerendering routes to ${outputPath} complete.`);
                        if (browserOptions.serviceWorker) {
                            const swResult = yield generateServiceWorker(context, outputPath, browserOptions);
                            if (!swResult.success) {
                                return swResult;
                            }
                        }
                    }
                    catch (error) {
                        spinner.fail(`Prerendering routes to ${outputPath} failed.`);
                        return { success: false, error: error.message };
                    }
                }
                return { success: true };
            }
            finally {
                // const _ = is a workaround to disable tsetse must use promises rule.
                // tslint:disable-next-line: no-floating-promises
                const _ = worker.end();
            }
        });
    }
    exports.execute = execute;
    function createWorker(browserOptions) {
        const { styles: normalizedStylesOptimization } = normalize_optimization_1.normalizeOptimization(browserOptions.optimization);
        const setupArgs = {
            inlineCriticalCss: normalizedStylesOptimization.inlineCritical,
        };
        const maxWorkers = Math.max(Math.min(os_1.cpus().length, 6) - 1, 1);
        const worker = new jest_worker_1.default(path.join(__dirname, 'worker.js'), {
            exposedMethods: ['render'],
            enableWorkerThreads: true,
            numWorkers: maxWorkers,
            setupArgs: [setupArgs],
        });
        worker.getStdout().pipe(process.stdout);
        worker.getStderr().pipe(process.stderr);
        return worker;
    }
    function generateServiceWorker(context, outputPath, browserOptions) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const spinner = ora(`Generating service worker for ${outputPath}...`).start();
            try {
                const projectName = (_a = context.target) === null || _a === void 0 ? void 0 : _a.project;
                if (!projectName) {
                    throw new Error('The builder requires a target.');
                }
                const root = core_1.normalize(context.workspaceRoot);
                const projectMetadata = yield context.getProjectMetadata(projectName);
                const projectRoot = core_1.resolve(root, core_1.normalize((_b = projectMetadata.root) !== null && _b !== void 0 ? _b : ''));
                yield service_worker_1.augmentAppWithServiceWorker(root, projectRoot, core_1.normalize(outputPath), browserOptions.baseHref || '/', browserOptions.ngswConfigPath);
                spinner.succeed(`Service worker generation for ${outputPath} complete.`);
                return { success: true };
            }
            catch (error) {
                spinner.fail(`Service worker generation for ${outputPath} failed.`);
                return { success: false, error: error.message };
            }
        });
    }
    exports.default = architect_1.createBuilder(execute);
});
//# sourceMappingURL=data:application/json;base64,