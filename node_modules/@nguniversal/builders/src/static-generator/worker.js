/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@nguniversal/builders/src/static-generator/worker", ["require", "exports", "@nguniversal/common/clover/server", "fs", "path"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.render = exports.setup = void 0;
    const server_1 = require("@nguniversal/common/clover/server");
    const fs_1 = require("fs");
    const path_1 = require("path");
    let engine;
    let sharedOptions;
    function setup(options) {
        engine = new server_1.Engine();
        sharedOptions = options;
    }
    exports.setup = setup;
    function render(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { outputPath, route } = options;
            const html = yield engine.render({
                publicPath: outputPath,
                inlineCriticalCss: sharedOptions.inlineCriticalCss,
                url: `http://localhost/${route}`,
            });
            // This case happens when we are prerendering "/".
            const outputFolderPath = path_1.join(outputPath, route);
            const outputIndexPath = path_1.join(outputFolderPath, 'index.html');
            if (route === '/') {
                const browserIndexOutputPathOriginal = path_1.join(outputPath, 'index-ssr.html');
                yield fs_1.promises.rename(outputIndexPath, browserIndexOutputPathOriginal);
            }
            yield fs_1.promises.mkdir(outputFolderPath, { recursive: true });
            yield fs_1.promises.writeFile(outputIndexPath, html);
        });
    }
    exports.render = render;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9idWlsZGVycy9zcmMvc3RhdGljLWdlbmVyYXRvci93b3JrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBRUgsOERBQTJEO0lBQzNELDJCQUFvQztJQUNwQywrQkFBNEI7SUFNNUIsSUFBSSxNQUFjLENBQUM7SUFDbkIsSUFBSSxhQUE4QixDQUFDO0lBRW5DLFNBQWdCLEtBQUssQ0FBQyxPQUF3QjtRQUM1QyxNQUFNLEdBQUcsSUFBSSxlQUFNLEVBQUUsQ0FBQztRQUN0QixhQUFhLEdBQUcsT0FBTyxDQUFDO0lBQzFCLENBQUM7SUFIRCxzQkFHQztJQUVELFNBQXNCLE1BQU0sQ0FBQyxPQUE4Qzs7WUFDekUsTUFBTSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsR0FBRyxPQUFPLENBQUM7WUFDdEMsTUFBTSxJQUFJLEdBQUcsTUFBTSxNQUFNLENBQUMsTUFBTSxDQUFDO2dCQUMvQixVQUFVLEVBQUUsVUFBVTtnQkFDdEIsaUJBQWlCLEVBQUUsYUFBYSxDQUFDLGlCQUFpQjtnQkFDbEQsR0FBRyxFQUFFLG9CQUFvQixLQUFLLEVBQUU7YUFDakMsQ0FBQyxDQUFDO1lBRUgsa0RBQWtEO1lBQ2xELE1BQU0sZ0JBQWdCLEdBQUcsV0FBSSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNqRCxNQUFNLGVBQWUsR0FBRyxXQUFJLENBQUMsZ0JBQWdCLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDN0QsSUFBSSxLQUFLLEtBQUssR0FBRyxFQUFFO2dCQUNqQixNQUFNLDhCQUE4QixHQUFHLFdBQUksQ0FBQyxVQUFVLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztnQkFDMUUsTUFBTSxhQUFFLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSw4QkFBOEIsQ0FBQyxDQUFDO2FBQ2xFO1lBRUQsTUFBTSxhQUFFLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7WUFDdEQsTUFBTSxhQUFFLENBQUMsU0FBUyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM1QyxDQUFDO0tBQUE7SUFsQkQsd0JBa0JDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7IEVuZ2luZSB9IGZyb20gJ0BuZ3VuaXZlcnNhbC9jb21tb24vY2xvdmVyL3NlcnZlcic7XG5pbXBvcnQgeyBwcm9taXNlcyBhcyBmcyB9IGZyb20gJ2ZzJztcbmltcG9ydCB7IGpvaW4gfSBmcm9tICdwYXRoJztcblxuZXhwb3J0IGludGVyZmFjZSBXb3JrZXJTZXR1cEFyZ3Mge1xuICBpbmxpbmVDcml0aWNhbENzcz86IGJvb2xlYW47XG59XG5cbmxldCBlbmdpbmU6IEVuZ2luZTtcbmxldCBzaGFyZWRPcHRpb25zOiBXb3JrZXJTZXR1cEFyZ3M7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cChvcHRpb25zOiBXb3JrZXJTZXR1cEFyZ3MpOiB2b2lkIHtcbiAgZW5naW5lID0gbmV3IEVuZ2luZSgpO1xuICBzaGFyZWRPcHRpb25zID0gb3B0aW9ucztcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlbmRlcihvcHRpb25zOiB7IG91dHB1dFBhdGg6IHN0cmluZzsgcm91dGU6IHN0cmluZyB9KTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IHsgb3V0cHV0UGF0aCwgcm91dGUgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IGh0bWwgPSBhd2FpdCBlbmdpbmUucmVuZGVyKHtcbiAgICBwdWJsaWNQYXRoOiBvdXRwdXRQYXRoLFxuICAgIGlubGluZUNyaXRpY2FsQ3NzOiBzaGFyZWRPcHRpb25zLmlubGluZUNyaXRpY2FsQ3NzLFxuICAgIHVybDogYGh0dHA6Ly9sb2NhbGhvc3QvJHtyb3V0ZX1gLFxuICB9KTtcblxuICAvLyBUaGlzIGNhc2UgaGFwcGVucyB3aGVuIHdlIGFyZSBwcmVyZW5kZXJpbmcgXCIvXCIuXG4gIGNvbnN0IG91dHB1dEZvbGRlclBhdGggPSBqb2luKG91dHB1dFBhdGgsIHJvdXRlKTtcbiAgY29uc3Qgb3V0cHV0SW5kZXhQYXRoID0gam9pbihvdXRwdXRGb2xkZXJQYXRoLCAnaW5kZXguaHRtbCcpO1xuICBpZiAocm91dGUgPT09ICcvJykge1xuICAgIGNvbnN0IGJyb3dzZXJJbmRleE91dHB1dFBhdGhPcmlnaW5hbCA9IGpvaW4ob3V0cHV0UGF0aCwgJ2luZGV4LXNzci5odG1sJyk7XG4gICAgYXdhaXQgZnMucmVuYW1lKG91dHB1dEluZGV4UGF0aCwgYnJvd3NlckluZGV4T3V0cHV0UGF0aE9yaWdpbmFsKTtcbiAgfVxuXG4gIGF3YWl0IGZzLm1rZGlyKG91dHB1dEZvbGRlclBhdGgsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICBhd2FpdCBmcy53cml0ZUZpbGUob3V0cHV0SW5kZXhQYXRoLCBodG1sKTtcbn1cbiJdfQ==